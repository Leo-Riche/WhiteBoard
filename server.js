const express = require("express");
const http = require("http");
const socketIo = require("socket.io");
const path = require("path");

const app = express();
const server = http.createServer(app);
const io = socketIo(server);

// Servir les fichiers statiques depuis le dossier public
app.use(express.static(path.join(__dirname, "public")));

// Route principale
app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "index.html"));
});

const drawingHistory = [];

// Liste de mots Ã  deviner
const wordsList = [
  "Soleil",
  "Lune",
  "Nuage",
  "Pluie",
  "Neige",
  "Arbre",
  "Fleur",
  "Feuille",
  "Montagne",
  "RiviÃ¨re",
  "Chat",
  "Chien",
  "Poisson",
  "Oiseau",
  "Lapin",
  "Grenouille",
  "Escargot",
  "Papillon",
  "Abeille",
  "Souris",
  "Pomme",
  "Banane",
  "Fraise",
  "Cerise",
  "Carotte",
  "Pain",
  "GÃ¢teau",
  "Glace",
  "Pizza",
  "Fromage",
  "Ballon",
  "Livre",
  "Chaise",
  "Crayon",
  "Brosse",
  "TÃ©lÃ©phone",
  "ClÃ©",
  "Sac",
  "Tasse",
  "Horloge",
  "Voiture",
  "VÃ©lo",
  "Bateau",
  "Avion",
  "Train",
  "FusÃ©e",
  "Skateboard",
  "MontgolfiÃ¨re",
  "Camion",
  "Moto",
  "Sourire",
  "Tristesse",
  "ColÃ¨re",
  "Ã‰tonnement",
  "CÅ“ur",
  "Yeux",
  "Nez",
  "Bouche",
  "Larmes",
  "Bisou",
  "Lit",
  "Table",
  "Lampe",
  "Porte",
  "FenÃªtre",
  "TÃ©lÃ©vision",
  "RÃ©frigÃ©rateur",
  "Four",
  "Tapis",
  "Rideaux",
  "Cadeau",
  "GÃ¢teau",
  "Bougie",
  "Sapin",
  "Bonhomme de neige",
  "Feu dâ€™artifice",
  "Confettis",
  "Chapeau de fÃªte",
  "Å’uf de PÃ¢ques",
  "Citrouille",
  "Brosse Ã  dents",
  "Dent",
  "Savon",
  "Ã‰toile",
  "Chapeau",
  "Chaussure",
  "Botte",
  "Gant",
  "Ã‰charpe",
  "Veste",
  "Bulle",
  "Carte",
  "Carte au trÃ©sor",
  "TrÃ¨fle",
  "Feu",
  "Tornade",
  "Igloo",
  "Igloo",
  "Globe",
  "Bocal",
  "Ananas",
  "PastÃ¨que",
  "Raisin",
  "Orange",
  "Poire",
  "Citron",
  "Brocoli",
  "MaÃ¯s",
  "Laitue",
  "Tomate",
  "Ciseaux",
  "Colle",
  "RÃ¨gle",
  "Trombone",
  "Ordinateur",
  "Tablette",
  "TÃ©lÃ©commande",
  "Ventilateur",
  "Parapluie",
  "Cadenas",
  "Bague",
  "Collier",
  "Bracelet",
  "Montre",
  "Couronne",
  "Masque",
  "Marteau",
  "Tournevis",
  "Clou",
  "ClÃ© anglaise",
  "Dinosaure",
  "Dragon",
  "Licorne",
  "FantÃ´me",
  "Zombi",
  "Robot",
  "Alien",
  "Monstre",
  "SorciÃ¨re",
  "Magicien",
  "ChÃ¢teau",
  "Pont",
  "Tour",
  "Maison",
  "Igloo",
  "Cabane",
  "Tente",
  "Caverne",
  "Phare",
  "Pyramide",
  "Plage",
  "Coquillage",
  "Crabe",
  "Sable",
  "Vague",
  "Serviette",
  "Lunettes de soleil",
  "Seau",
  "Pelle",
  "ChÃ¢teau de sable",
  "ZÃ¨bre",
  "Tigre",
  "Lion",
  "Ã‰lÃ©phant",
  "Girafe",
  "Crocodile",
  "Singe",
  "Panda",
  "Ours",
  "Koala",
  "Tambour",
  "Guitare",
  "Piano",
  "Trompette",
  "Violon",
  "Micro",
  "Casque audio",
  "Note de musique",
  "Disque",
  "Radio",
];

// Ã‰tat du jeu
let gameState = {
  players: new Map(), // socketId -> {id, name, score}
  currentDrawer: null,
  currentWord: null,
  gameActive: false,
  roundTimer: null,
  roundDuration: 60000, // 60 secondes par tour
  scores: new Map(),
  waitingForNextRound: false, // Nouveau: indique si on attend qu'un joueur lance la prochaine manche
};

// Fonction pour dÃ©marrer une nouvelle manche
function startNewRound() {
  const playerIds = Array.from(gameState.players.keys());

  if (playerIds.length < 2) {
    gameState.gameActive = false;
    io.emit("gameStatus", {
      active: false,
      message: "Il faut au moins 2 joueurs pour commencer le jeu",
    });
    return;
  }

  // SÃ©lectionner un nouveau dessinateur (diffÃ©rent du prÃ©cÃ©dent si possible)
  let availableDrawers = playerIds.filter(
    (id) => id !== gameState.currentDrawer
  );
  if (availableDrawers.length === 0) availableDrawers = playerIds;

  gameState.currentDrawer =
    availableDrawers[Math.floor(Math.random() * availableDrawers.length)];
  gameState.currentWord =
    wordsList[Math.floor(Math.random() * wordsList.length)];
  gameState.gameActive = true;
  gameState.waitingForNextRound = false; // Reset du flag d'attente

  // Effacer le canvas pour la nouvelle manche
  drawingHistory.length = 0;
  io.emit("clear");

  // Informer tous les joueurs du nouveau tour
  io.emit("newRound", {
    drawerId: gameState.currentDrawer,
    drawerName:
      gameState.players.get(gameState.currentDrawer)?.name || "Joueur",
    isDrawing: false, // Par dÃ©faut, personne ne dessine
  });

  // Envoyer le mot seulement au dessinateur
  io.to(gameState.currentDrawer).emit("wordToDrawr", {
    word: gameState.currentWord,
    isDrawer: true,
  });

  // DÃ©marrer le timer du tour
  if (gameState.roundTimer) clearTimeout(gameState.roundTimer);
  gameState.roundTimer = setTimeout(() => {
    endRound("timeout");
  }, gameState.roundDuration);

  console.log(
    `ðŸŽ® Nouvelle manche: ${
      gameState.players.get(gameState.currentDrawer)?.name
    } dessine "${gameState.currentWord}"`
  );
}

// Fonction pour terminer une manche
function endRound(reason) {
  if (gameState.roundTimer) {
    clearTimeout(gameState.roundTimer);
    gameState.roundTimer = null;
  }

  gameState.gameActive = false;
  gameState.waitingForNextRound = true;

  io.emit("roundEnd", {
    reason: reason,
    word: gameState.currentWord,
    scores: Array.from(gameState.players.entries()).map(([id, player]) => ({
      name: player.name,
      score: player.score,
    })),
    waitingForNext: true, // Indique qu'on attend l'action d'un joueur
  });

  // Ne plus dÃ©marrer automatiquement la prochaine manche
  // setTimeout(() => {
  //   startNewRound();
  // }, 3000);
}

io.on("connection", (socket) => {
  console.log("ðŸŸ¢ Un utilisateur est connectÃ©");

  socket.emit("initCanvas", drawingHistory);

  // Gestion de l'inscription d'un joueur
  socket.on("joinGame", (playerName) => {
    const player = {
      id: socket.id,
      name: playerName || `Joueur${gameState.players.size + 1}`,
      score: 0,
    };

    gameState.players.set(socket.id, player);

    console.log(`ðŸ‘¤ ${player.name} a rejoint le jeu`);

    // Informer tous les joueurs de la liste mise Ã  jour
    io.emit("playersUpdate", {
      players: Array.from(gameState.players.values()),
      currentDrawer: gameState.currentDrawer,
    });

    // DÃ©marrer le jeu si on a au moins 2 joueurs et que le jeu n'est pas actif
    if (gameState.players.size >= 2 && !gameState.gameActive) {
      setTimeout(() => startNewRound(), 1000);
    }
  });

  // Gestion des messages de chat (pour deviner)
  socket.on("chatMessage", (message) => {
    const player = gameState.players.get(socket.id);
    if (!player || !gameState.gameActive) return;

    // Si c'est le dessinateur, ne pas traiter le message
    if (socket.id === gameState.currentDrawer) {
      socket.emit("chatResponse", {
        type: "error",
        message: "Vous ne pouvez pas deviner votre propre mot !",
      });
      return;
    }

    // VÃ©rifier si le message correspond au mot Ã  deviner
    if (message.toLowerCase().trim() === gameState.currentWord.toLowerCase()) {
      // Bonne rÃ©ponse !
      player.score += 10;

      io.emit("chatMessage", {
        playerName: player.name,
        message: message,
        isCorrect: true,
      });

      io.emit("correctGuess", {
        playerName: player.name,
        word: gameState.currentWord,
        score: player.score,
      });

      // Terminer la manche
      endRound("guessed");
    } else {
      // Mauvaise rÃ©ponse, diffuser le message
      io.emit("chatMessage", {
        playerName: player.name,
        message: message,
        isCorrect: false,
      });
    }
  });

  // Gestion du bouton "Prochaine manche"
  socket.on("startNextRound", () => {
    const player = gameState.players.get(socket.id);
    if (!player) return;

    // VÃ©rifier si on est bien en attente d'une nouvelle manche
    if (gameState.waitingForNextRound && gameState.players.size >= 2) {
      console.log(`ðŸŽ® ${player.name} a lancÃ© la prochaine manche`);

      // Informer tous les joueurs qui a lancÃ© la manche
      io.emit("nextRoundStarted", {
        playerName: player.name,
      });

      // DÃ©marrer la nouvelle manche aprÃ¨s un petit dÃ©lai
      setTimeout(() => {
        startNewRound();
      }, 1000);
    }
  });

  socket.on("draw", (data) => {
    // Seul le dessinateur peut dessiner
    if (socket.id === gameState.currentDrawer && gameState.gameActive) {
      drawingHistory.push({ type: "draw", data });
      socket.broadcast.emit("draw", data);
    }
  });

  socket.on("draw_line", (data) => {
    // Seul le dessinateur peut dessiner
    if (socket.id === gameState.currentDrawer && gameState.gameActive) {
      drawingHistory.push({ type: "draw_line", data });
      socket.broadcast.emit("draw_line", data);
    }
  });

  socket.on("clear", () => {
    // Seul le dessinateur peut effacer
    if (socket.id === gameState.currentDrawer && gameState.gameActive) {
      drawingHistory.length = 0;
      io.emit("clear");
    }
  });

  socket.on("disconnect", () => {
    console.log("ðŸ”´ Un utilisateur est dÃ©connectÃ©");

    const player = gameState.players.get(socket.id);
    if (player) {
      console.log(`ðŸ‘¤ ${player.name} a quittÃ© le jeu`);
      gameState.players.delete(socket.id);

      // Si c'Ã©tait le dessinateur, terminer la manche
      if (socket.id === gameState.currentDrawer) {
        endRound("disconnected");
      }

      // Informer les autres joueurs
      io.emit("playersUpdate", {
        players: Array.from(gameState.players.values()),
        currentDrawer: gameState.currentDrawer,
      });

      // ArrÃªter le jeu s'il n'y a plus assez de joueurs
      if (gameState.players.size < 2 && gameState.gameActive) {
        gameState.gameActive = false;
        if (gameState.roundTimer) {
          clearTimeout(gameState.roundTimer);
          gameState.roundTimer = null;
        }
        io.emit("gameStatus", {
          active: false,
          message: "Il faut au moins 2 joueurs pour continuer le jeu",
        });
      }
    }
  });
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`ðŸš€ Serveur en cours d'exÃ©cution sur le port ${PORT}`);
});
